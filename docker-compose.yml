version: '3.8'

services:
  # MySQL container for Customer Service
  mysql-customer:
    image: mysql:8
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root # Change to your custom root password
      MYSQL_DATABASE: customers_database
    volumes:
      - customer_db_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # MySQL container for Vehicle Service
  mysql-vehicle:
    image: mysql:8
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root # Change to your custom root password
      MYSQL_DATABASE: vehicles_database
    volumes:
      - vehicle_db_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5

  mysql-schedule:
    image: mysql:8
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root # Change to your custom root password
      MYSQL_DATABASE: schedules_database
    volumes:
      - schedule_db_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5
  # Customer Service container
  customer-service:
    build:
      context: ./customer-service
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: "mysql://root:root@mysql-customer:3306/customers_database" # Change RootPasswordHere to your custom root password
    depends_on:
      mysql-customer:
        condition: service_healthy
    restart: on-failure
    volumes:
      - ./customer-service:/app
    networks:
      - app-network
    command: >
      /bin/sh -c "
        npx prisma migrate deploy &&
        npx prisma generate &&
        npm run start"

  # Vehicle Service container 
  vehicle-service:
    build:
      context: ./vehicle-service
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: "mysql://root:root@mysql-vehicle:3306/vehicles_database" # Change RootPasswordHere to your custom root password
    depends_on:
      mysql-vehicle:
        condition: service_healthy
    restart: on-failure
    volumes:
      - ./vehicle-service:/app
    networks:
      - app-network
    command: >
      /bin/sh -c "
        npx prisma migrate deploy &&
        npx prisma generate &&
        npm run start"

  workshop-scheduler-service:
    build:
      context: ./workshop-scheduler-service
    ports:
      - "5000:5000"
    environment:
      DATABASE_URL: "mysql://root:root@mysql-schedule:3306/schedules_database"
      KAFKA_HOST: kafka:9092 # Make sure this matches the internal Kafka hostname and port
    depends_on:
      - mysql-schedule
      - kafka 
    restart: on-failure
    volumes:
      - ./workshop-scheduler-service:/app
    networks:
      - app-network
    command: >
      /bin/sh -c "
        npx prisma migrate deploy &&
        npx prisma generate &&
        npm run start"
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 30s
      retries: 5

  # Zookeeper (required for Kafka)
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - app-network
  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - app-network

  notification-service:
    build:
      context: ./notification-service
    depends_on:
      - kafka
    restart: always
    networks:
      - app-network
    command: [ "node", "src/server.js" ]
    # Ensure Kafka is ready before starting the service
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 30s
      retries: 5

  billing-service:
    build:
      context: ./billing-service
    ports:
      - "6000:6000"
    restart: always
    networks:
      - app-network
    command: [ "node", "src/server.js" ]



volumes:
  customer_db_data:
    driver: local
  vehicle_db_data:
    driver: local
  schedule_db_data:
    driver: local

networks:
  app-network:
    driver: bridge
